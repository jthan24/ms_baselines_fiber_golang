// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"prom/app"
	"prom/app/db"
	"prom/app/otel"
	"prom/app/otel/zapadapter"
	"prom/core/domain/logger"
	"prom/core/domain/repository"
)

// Injectors from wire.go:

func initializeApplication() (*app.Application, error) {
	logger, err := ProvideZapLogger()
	if err != nil {
		return nil, err
	}
	db, err := ProvideMysqlUserRepo()
	if err != nil {
		return nil, err
	}
	fiberApp := ProvideFiberHttpAdapter()
	otelProviderImpl := ProvideOtelAWSProvider()
	application := &app.Application{
		Logger:       logger,
		UserRepo:     db,
		HttpAdapter:  fiberApp,
		OtelProvider: otelProviderImpl,
	}
	return application, nil
}

// wire.go:

func ProvideZapLogger() (logger.Logger, error) {
	return zap.NewZapLogger()
}

func ProvideMysqlUserRepo() (repository.Connection, error) {
	return db.New(conf.DBConnectionString)
}

func ProvideFiberHttpAdapter() *fiber.App {
	return fiber.New()
}

func ProvideOtelAWSProvider() *app.OtelProviderImpl {
	return &app.OtelProviderImpl{
		TracerProvider:  otel.InitTracer,
		MetricsProvider: otel.InitMetricsProvider,
	}
}

var Set = wire.NewSet(
	ProvideZapLogger,
	ProvideMysqlUserRepo,
	ProvideFiberHttpAdapter,
	ProvideOtelAWSProvider, wire.Struct(new(app.Application), "Logger", "UserRepo", "HttpAdapter", "OtelProvider"))
